generator client {
  provider      = "prisma-client-js"
  // 为不同运行环境预取引擎：本地(mac) + Railway(Debian OpenSSL 3)
  binaryTargets = ["native", "debian-openssl-3.0.x"]
}

datasource db {
  provider  = "postgresql"
  url       = env("DATABASE_URL")
  directUrl = env("DIRECT_URL")
}

model User {
  id                  String                 @id @default(cuid())
  companyId           String?
  email               String                 @unique
  username            String                 @unique
  name                String
  password            String
  avatar              String?
  phone               String?
  isActive            Boolean                @default(true)
  createdAt           DateTime               @default(now())
  updatedAt           DateTime               @updatedAt
  departmentId        String?
  gitlabUserId        Int?
  gitlabUsername      String?
  gitlabToken         String?
  uploadedAttachments Attachment[]           @relation("uploadedAttachments")
  taskComments        Comment[]
  issueComments       IssueComment[]         @relation("IssueCommentAuthor")
  assignedIssues      Issue[]                @relation("IssueAssignee")
  createdIssues       Issue[]                @relation("IssueCreator")
  leaveTransactions   LeaveTransaction[]
  notifications       Notification[]
  prdReviews          PRDReview[]            @relation("PRDReviewer")
  prdAuthored         PRD[]                  @relation("PRDAuthor")
  projectMembers      ProjectMember[]
  ownedProjects       Project[]              @relation("ProjectOwner")
  assignedTasks       Task[]                 @relation("TaskAssignee")
  createdTasks        Task[]                 @relation("TaskCreator")
  teamMembers         TeamMember[]
  grantsCreated       TemporaryAccessGrant[] @relation("GrantCreatedBy")
  grantsGranted       TemporaryAccessGrant[] @relation("GrantToGrantee")
  timeLogs            TimeLog[]
  attachmentRefs      UserAttachmentRef[]
  bankAccounts        UserBankAccount[]
  contracts           UserContract[]
  documents           UserDocument[]
  educations          UserEducation[]
  emergencyContacts   UserEmergencyContact[]
  familyMembers       UserFamilyMember[]
  userFieldValues     UserFieldValue[]
  userRoles           UserRole[]
  visibility          UserVisibility?
  workExperiences     UserWorkExperience[]
  company             Company?               @relation(fields: [companyId], references: [id])
  department          Department?            @relation(fields: [departmentId], references: [id])

  @@map("users")
}

model Department {
  id            String       @id @default(cuid())
  companyId     String?
  name          String
  description   String?
  parentId      String?
  isActive      Boolean      @default(true)
  createdAt     DateTime     @default(now())
  updatedAt     DateTime     @updatedAt
  leaderUserIds String[]     @default([])
  company       Company?     @relation(fields: [companyId], references: [id])
  parent        Department?  @relation("DepartmentHierarchy", fields: [parentId], references: [id])
  children      Department[] @relation("DepartmentHierarchy")
  teams         Team[]
  users         User[]

  @@map("departments")
}

model Company {
  id          String       @id @default(cuid())
  name        String       @unique
  code        String?      @unique
  createdAt   DateTime     @default(now())
  departments Department[]
  users       User[]

  @@map("companies")
}

model Team {
  id           String       @id @default(cuid())
  name         String
  description  String?
  departmentId String?
  isActive     Boolean      @default(true)
  createdAt    DateTime     @default(now())
  updatedAt    DateTime     @updatedAt
  projects     Project[]
  members      TeamMember[]
  department   Department?  @relation(fields: [departmentId], references: [id])

  @@map("teams")
}

model TeamMember {
  id       String         @id @default(cuid())
  userId   String
  teamId   String
  role     TeamMemberRole @default(MEMBER)
  joinedAt DateTime       @default(now())
  team     Team           @relation(fields: [teamId], references: [id], onDelete: Cascade)
  user     User           @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([userId, teamId])
  @@map("team_members")
}

model Role {
  id              String           @id @default(cuid())
  name            String           @unique
  description     String?
  isSystem        Boolean          @default(false)
  createdAt       DateTime         @default(now())
  updatedAt       DateTime         @updatedAt
  rolePermissions RolePermission[]
  userRoles       UserRole[]

  @@map("roles")
}

model UserRole {
  id         String   @id @default(cuid())
  userId     String
  roleId     String
  assignedAt DateTime @default(now())
  role       Role     @relation(fields: [roleId], references: [id], onDelete: Cascade)
  user       User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([userId, roleId])
  @@map("user_roles")
}

model Permission {
  id              String           @id @default(cuid())
  name            String           @unique
  resource        String
  action          String
  description     String?
  createdAt       DateTime         @default(now())
  rolePermissions RolePermission[]

  @@unique([resource, action])
  @@map("permissions")
}

model RolePermission {
  id           String     @id @default(cuid())
  roleId       String
  permissionId String
  assignedAt   DateTime   @default(now())
  permission   Permission @relation(fields: [permissionId], references: [id], onDelete: Cascade)
  role         Role       @relation(fields: [roleId], references: [id], onDelete: Cascade)

  @@unique([roleId, permissionId])
  @@map("role_permissions")
}

model FieldDefinition {
  id             String              @id @default(cuid())
  key            String              @unique
  label          String
  classification FieldClassification
  selfEditable   Boolean             @default(false)
  description    String?
  createdAt      DateTime            @default(now())
  updatedAt      DateTime            @updatedAt
  fieldSetItems  FieldSetItem[]
  fieldValues    UserFieldValue[]

  @@map("field_definitions")
}

model FieldSet {
  id          String         @id @default(cuid())
  name        String         @unique
  description String?
  isSystem    Boolean        @default(false)
  createdAt   DateTime       @default(now())
  updatedAt   DateTime       @updatedAt
  items       FieldSetItem[]

  @@map("field_sets")
}

model FieldSetItem {
  id         String          @id @default(cuid())
  fieldSetId String
  fieldId    String
  order      Int?
  field      FieldDefinition @relation(fields: [fieldId], references: [id], onDelete: Cascade)
  fieldSet   FieldSet        @relation(fields: [fieldSetId], references: [id], onDelete: Cascade)

  @@unique([fieldSetId, fieldId])
  @@map("field_set_items")
}

model UserFieldValue {
  id          String          @id @default(cuid())
  userId      String
  fieldId     String
  valueString String?
  valueNumber Float?
  valueDate   DateTime?
  valueJson   Json?
  createdAt   DateTime        @default(now())
  updatedAt   DateTime        @updatedAt
  field       FieldDefinition @relation(fields: [fieldId], references: [id], onDelete: Cascade)
  user        User            @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([userId, fieldId])
  @@index([userId])
  @@index([fieldId])
  @@map("user_field_values")
}

model UserEducation {
  id                  String    @id @default(cuid())
  userId              String
  degree              String?
  school              String?
  enrollDate          DateTime?
  graduateDate        DateTime?
  major               String?
  studyForm           String?
  schoolingYears      Int?
  degreeName          String?
  awardingCountry     String?
  awardingInstitution String?
  awardingDate        DateTime?
  languageLevel       String?
  createdAt           DateTime  @default(now())
  updatedAt           DateTime  @updatedAt
  user                User      @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([userId])
  @@map("user_educations")
}

model UserWorkExperience {
  id         String    @id @default(cuid())
  userId     String
  company    String?
  department String?
  position   String?
  startDate  DateTime?
  endDate    DateTime?
  createdAt  DateTime  @default(now())
  updatedAt  DateTime  @updatedAt
  user       User      @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([userId])
  @@map("user_work_experiences")
}

model UserFamilyMember {
  id           String   @id @default(cuid())
  userId       String
  name         String
  relation     String
  organization String?
  contact      String?
  createdAt    DateTime @default(now())
  updatedAt    DateTime @updatedAt
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([userId])
  @@map("user_family_members")
}

model UserEmergencyContact {
  id        String   @id @default(cuid())
  userId    String
  name      String
  relation  String?
  phone     String
  address   String?
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([userId])
  @@map("user_emergency_contacts")
}

model UserContract {
  id            String    @id @default(cuid())
  userId        String
  contractNo    String?
  company       String?
  contractType  String?
  startDate     DateTime?
  endDate       DateTime?
  actualEndDate DateTime?
  signedTimes   Int?
  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @updatedAt
  user          User      @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([userId])
  @@map("user_contracts")
}

model UserDocument {
  id         String    @id @default(cuid())
  userId     String
  docType    String
  docNumber  String
  validUntil DateTime?
  createdAt  DateTime  @default(now())
  updatedAt  DateTime  @updatedAt
  user       User      @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([userId])
  @@map("user_documents")
}

model UserBankAccount {
  id            String   @id @default(cuid())
  userId        String
  accountName   String?
  bankName      String?
  bankBranch    String?
  accountNumber String?
  createdAt     DateTime @default(now())
  updatedAt     DateTime @updatedAt
  user          User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([userId])
  @@map("user_bank_accounts")
}

model UserAttachmentRef {
  id             String         @id @default(cuid())
  userId         String
  attachmentId   String
  attachmentType AttachmentType
  notes          String?
  createdAt      DateTime       @default(now())
  attachment     Attachment     @relation(fields: [attachmentId], references: [id], onDelete: Cascade)
  user           User           @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([userId])
  @@index([attachmentId])
  @@map("user_attachment_refs")
}

model LeaveTransaction {
  id        String    @id @default(cuid())
  userId    String
  type      LeaveType
  amount    Float
  reason    String?
  createdAt DateTime  @default(now())
  user      User      @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([userId])
  @@index([type])
  @@map("leave_transactions")
}

model TemporaryAccessGrant {
  id                 String   @id @default(cuid())
  granteeId          String
  resource           String
  fieldKey           String
  action             String
  startAt            DateTime
  endAt              DateTime
  allowCrossBoundary Boolean  @default(false)
  scopeDepartmentId  String?
  createdById        String
  createdAt          DateTime @default(now())
  createdBy          User     @relation("GrantCreatedBy", fields: [createdById], references: [id])
  grantee            User     @relation("GrantToGrantee", fields: [granteeId], references: [id], onDelete: Cascade)

  @@index([granteeId, resource, fieldKey, action])
  @@map("temporary_access_grants")
}

model UserVisibility {
  id        String    @id @default(cuid())
  userId    String    @unique
  hidden    Boolean   @default(false)
  viewScope ViewScope @default(ALL)
  createdAt DateTime  @default(now())
  user      User      @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("user_visibility")
}

model Project {
  id               String          @id @default(cuid())
  name             String
  key              String          @unique
  description      String?
  status           ProjectStatus   @default(PLANNING)
  priority         Priority        @default(MEDIUM)
  startDate        DateTime?
  endDate          DateTime?
  createdAt        DateTime        @default(now())
  updatedAt        DateTime        @updatedAt
  ownerId          String
  teamId           String?
  gitlabProjectId  Int?
  gitlabProjectUrl String?
  issueTags        IssueTag[]
  issues           Issue[]
  members          ProjectMember[]
  owner            User            @relation("ProjectOwner", fields: [ownerId], references: [id])
  team             Team?           @relation(fields: [teamId], references: [id])
  tasks            Task[]
  workflows        Workflow[]

  @@map("projects")
}

model ProjectMember {
  id        String            @id @default(cuid())
  projectId String
  userId    String
  role      ProjectMemberRole @default(MEMBER)
  joinedAt  DateTime          @default(now())
  project   Project           @relation(fields: [projectId], references: [id], onDelete: Cascade)
  user      User              @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([projectId, userId])
  @@map("project_members")
}

model Task {
  id              String           @id @default(cuid())
  title           String
  description     String?
  status          TaskStatus       @default(TODO)
  priority        Priority         @default(MEDIUM)
  startDate       DateTime?
  dueDate         DateTime?
  estimatedHours  Float?
  actualHours     Float?
  createdAt       DateTime         @default(now())
  updatedAt       DateTime         @updatedAt
  projectId       String
  assigneeId      String?
  creatorId       String
  parentId        String?
  issueId         String?
  gitlabIssueId   Int?
  gitlabIssueUrl  String?
  workflowStateId String?
  attachments     Attachment[]
  comments        Comment[]
  dependencies    TaskDependency[] @relation("DependentTask")
  dependents      TaskDependency[] @relation("PrecedingTask")
  assignee        User?            @relation("TaskAssignee", fields: [assigneeId], references: [id])
  creator         User             @relation("TaskCreator", fields: [creatorId], references: [id])
  issue           Issue?           @relation("IssueToTask", fields: [issueId], references: [id])
  parent          Task?            @relation("TaskHierarchy", fields: [parentId], references: [id])
  children        Task[]           @relation("TaskHierarchy")
  project         Project          @relation(fields: [projectId], references: [id], onDelete: Cascade)
  workflowState   WorkflowState?   @relation(fields: [workflowStateId], references: [id])
  timeLogs        TimeLog[]

  @@map("tasks")
}

model TaskDependency {
  id              String         @id @default(cuid())
  dependentTaskId String
  precedingTaskId String
  dependencyType  DependencyType @default(FINISH_TO_START)
  createdAt       DateTime       @default(now())
  dependentTask   Task           @relation("DependentTask", fields: [dependentTaskId], references: [id], onDelete: Cascade)
  precedingTask   Task           @relation("PrecedingTask", fields: [precedingTaskId], references: [id], onDelete: Cascade)

  @@unique([dependentTaskId, precedingTaskId])
  @@map("task_dependencies")
}

model Workflow {
  id          String               @id @default(cuid())
  name        String
  description String?
  isDefault   Boolean              @default(false)
  isActive    Boolean              @default(true)
  createdAt   DateTime             @default(now())
  updatedAt   DateTime             @updatedAt
  projectId   String
  states      WorkflowState[]
  transitions WorkflowTransition[]
  project     Project              @relation(fields: [projectId], references: [id], onDelete: Cascade)

  @@map("workflows")
}

model WorkflowState {
  id              String               @id @default(cuid())
  name            String
  description     String?
  color           String?
  order           Int
  isInitial       Boolean              @default(false)
  isFinal         Boolean              @default(false)
  createdAt       DateTime             @default(now())
  workflowId      String
  tasks           Task[]
  workflow        Workflow             @relation(fields: [workflowId], references: [id], onDelete: Cascade)
  fromTransitions WorkflowTransition[] @relation("FromState")
  toTransitions   WorkflowTransition[] @relation("ToState")

  @@unique([workflowId, name])
  @@map("workflow_states")
}

model WorkflowTransition {
  id          String        @id @default(cuid())
  name        String
  description String?
  createdAt   DateTime      @default(now())
  workflowId  String
  fromStateId String
  toStateId   String
  fromState   WorkflowState @relation("FromState", fields: [fromStateId], references: [id], onDelete: Cascade)
  toState     WorkflowState @relation("ToState", fields: [toStateId], references: [id], onDelete: Cascade)
  workflow    Workflow      @relation(fields: [workflowId], references: [id], onDelete: Cascade)

  @@unique([workflowId, fromStateId, toStateId])
  @@map("workflow_transitions")
}

model Comment {
  id        String    @id @default(cuid())
  content   String
  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt
  taskId    String
  authorId  String
  parentId  String?
  author    User      @relation(fields: [authorId], references: [id], onDelete: Cascade)
  parent    Comment?  @relation("CommentReplies", fields: [parentId], references: [id])
  replies   Comment[] @relation("CommentReplies")
  task      Task      @relation(fields: [taskId], references: [id], onDelete: Cascade)

  @@map("comments")
}

model Attachment {
  id                 String              @id @default(cuid())
  filename           String
  fileUrl            String
  fileSize           Int
  mimeType           String
  createdAt          DateTime            @default(now())
  taskId             String?
  issueId            String?
  uploaderId         String
  issue              Issue?              @relation("IssueAttachments", fields: [issueId], references: [id], onDelete: Cascade)
  task               Task?               @relation(fields: [taskId], references: [id], onDelete: Cascade)
  uploader           User                @relation("uploadedAttachments", fields: [uploaderId], references: [id])
  userAttachmentRefs UserAttachmentRef[]

  @@map("attachments")
}

model Notification {
  id           String           @id @default(cuid())
  title        String
  content      String?
  type         NotificationType
  isRead       Boolean          @default(false)
  createdAt    DateTime         @default(now())
  userId       String
  resourceType String?
  resourceId   String?
  user         User             @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("notifications")
}

model TimeLog {
  id          String   @id @default(cuid())
  description String?
  hours       Float
  date        DateTime
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  taskId      String
  userId      String
  task        Task     @relation(fields: [taskId], references: [id], onDelete: Cascade)
  user        User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("time_logs")
}

model Issue {
  id               String             @id @default(cuid())
  title            String
  description      String?
  priority         Priority           @default(MEDIUM)
  status           IssueStatus        @default(OPEN)
  inputSource      InputSource
  issueType        IssueType
  businessValue    String?
  userImpact       String?
  technicalRisk    String?
  createdAt        DateTime           @default(now())
  updatedAt        DateTime           @updatedAt
  dueDate          DateTime?
  creatorId        String
  assigneeId       String?
  projectId        String
  IssueTagRelation IssueTagRelation[]
  attachments      Attachment[]       @relation("IssueAttachments")
  comments         IssueComment[]
  assignee         User?              @relation("IssueAssignee", fields: [assigneeId], references: [id])
  creator          User               @relation("IssueCreator", fields: [creatorId], references: [id])
  project          Project            @relation(fields: [projectId], references: [id])
  prds             PRD[]
  tasks            Task[]             @relation("IssueToTask")

  @@map("issues")
}

model IssueComment {
  id        String         @id @default(cuid())
  content   String
  createdAt DateTime       @default(now())
  updatedAt DateTime       @updatedAt
  issueId   String
  authorId  String
  parentId  String?
  author    User           @relation("IssueCommentAuthor", fields: [authorId], references: [id])
  issue     Issue          @relation(fields: [issueId], references: [id], onDelete: Cascade)
  parent    IssueComment?  @relation("CommentReplies", fields: [parentId], references: [id])
  replies   IssueComment[] @relation("CommentReplies")

  @@map("issue_comments")
}

model IssueTag {
  id               String             @id @default(cuid())
  name             String
  color            String             @default("#6B7280")
  projectId        String
  IssueTagRelation IssueTagRelation[]
  project          Project            @relation(fields: [projectId], references: [id], onDelete: Cascade)

  @@unique([projectId, name])
  @@map("issue_tags")
}

model PRD {
  id        String      @id @default(cuid())
  title     String
  content   String?
  version   String      @default("1.0")
  status    PRDStatus   @default(DRAFT)
  createdAt DateTime    @default(now())
  updatedAt DateTime    @updatedAt
  issueId   String
  authorId  String
  reviews   PRDReview[]
  author    User        @relation("PRDAuthor", fields: [authorId], references: [id])
  issue     Issue       @relation(fields: [issueId], references: [id], onDelete: Cascade)

  @@map("prds")
}

model PRDReview {
  id         String       @id @default(cuid())
  status     ReviewStatus
  comment    String?
  createdAt  DateTime     @default(now())
  prdId      String
  reviewerId String
  prd        PRD          @relation(fields: [prdId], references: [id], onDelete: Cascade)
  reviewer   User         @relation("PRDReviewer", fields: [reviewerId], references: [id])

  @@map("prd_reviews")
}

model IssueTagRelation {
  A          String
  B          String
  issues     Issue    @relation(fields: [A], references: [id], onDelete: Cascade)
  issue_tags IssueTag @relation(fields: [B], references: [id], onDelete: Cascade)

  @@unique([A, B], map: "_IssueTagRelation_AB_unique")
  @@index([B], map: "_IssueTagRelation_B_index")
  @@map("_IssueTagRelation")
}

enum FieldClassification {
  PUBLIC
  INTERNAL
  SENSITIVE
  HIGHLY_SENSITIVE
}

enum TeamMemberRole {
  LEADER
  MEMBER
}

enum ProjectMemberRole {
  ADMIN
  MEMBER
  VIEWER
}

enum ProjectStatus {
  PLANNING
  ACTIVE
  ON_HOLD
  COMPLETED
  CANCELLED
}

enum TaskStatus {
  TODO
  IN_PROGRESS
  IN_REVIEW
  DONE
  CANCELLED
}

enum Priority {
  LOW
  MEDIUM
  HIGH
  URGENT
}

enum DependencyType {
  FINISH_TO_START
  START_TO_START
  FINISH_TO_FINISH
  START_TO_FINISH
}

enum ViewScope {
  ALL
  SELF_ONLY
  DEPT_ONLY
}

enum NotificationType {
  TASK_ASSIGNED
  TASK_UPDATED
  TASK_COMMENTED
  PROJECT_UPDATED
  MENTION
  DEADLINE_REMINDER
  SYSTEM
  ISSUE_ASSIGNED
  ISSUE_UPDATED
  ISSUE_COMMENTED
  ISSUE_STATUS_CHANGED
}

enum AttachmentType {
  ID_CARD
  CMB_BANK_CARD
  HOUSEHOLD_MAIN
  HOUSEHOLD_SELF
  EDU_DIPLOMA
  EDU_DEGREE
  RESIGNATION_CERT
  MEDICAL_REPORT
  ORIGINAL_RESUME
  ONBOARD_FORM
  STUDENT_ID
  PERSONALITY_TEST
}

enum LeaveType {
  ANNUAL
  PERSONAL
  PAID_SICK
  MARRIAGE
  MATERNITY
  PATERNITY
  FUNERAL
  PRENATAL_CHECK
  SICK
  OTHER
}

enum IssueStatus {
  OPEN
  IN_DISCUSSION
  APPROVED
  IN_PRD
  IN_DEVELOPMENT
  IN_TESTING
  IN_ACCEPTANCE
  COMPLETED
  REJECTED
  CANCELLED
}

enum InputSource {
  USER_FEEDBACK
  INTERNAL
  DATA_ANALYSIS
  STRATEGY
}

enum IssueType {
  FEATURE
  ENHANCEMENT
  BUG_FIX
  TECHNICAL_DEBT
  RESEARCH
}

enum PRDStatus {
  DRAFT
  REVIEW
  APPROVED
  REJECTED
}

enum ReviewStatus {
  PENDING
  APPROVED
  REJECTED
  NEEDS_REVISION
}
